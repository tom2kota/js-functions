/*
    Замыкание в JavaScript
    Замыкание функции — это комбинация функции и лексического окружения, в котором эта функция была определена;
    замыкание обеспечивает доступ внутренней функции к области видимости (Scope) внешней функции
    (при этом переменные внутренней функции для внешнего окружения недоступны).

    Иначе говоря, замыкание — это когда функция умеет запоминать и имеет доступ к лексической области видимости
    даже тогда, когда эта функция выполняется вне своей лексической области видимости.

    Замыкания часто используются в JavaScript для обеспечения конфиденциальности данных объекта,
    в обработчиках событий и функциях обратного вызова, а также в других шаблонах функционального программирования.

    Выполняющуюся функцию можно рассматривать как объект в памяти;
    переменные функции — это свойства этого объекта. Когда обычная функция завершает свое выполнение,
    то освобождает память, которую занимала, если на её переменные не осталось ссылок.

    При замыкании внутренняя функция может использовать свойства объекта внешней функции,
    что препятствует удалению объекта (переменных) внешней функции из памяти (внешняя переменная «замыкается» внутренней функцией).

    Замыкание позволяет:
    ограничить доступ к данным (ограничить их область видимости);
    создать своеобразное автономное хранилище данных.

    https://flagman.top/about-business/php-i-t-p-uzelki/zamykanie-v-javascript
 */

const check = (() => {

    let login = "Login";
    let pass = "Pass";

    return {
        checkLog: function (value) {
            return value === login;
        },
        checkPass: function (value) {
            return value === pass;
        }
    };
})()

console.log(check.checkLog("Login"));
console.log(check.checkPass("Pass"));

console.log(login); // ReferenceError: login is not defined
console.log(pass); // ReferenceError: login is not defined