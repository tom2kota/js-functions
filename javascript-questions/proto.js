/*
    Прототипное наследование
    https://learn.javascript.ru/prototype-inheritance
    В JavaScript объекты имеют специальное скрытое свойство [[Prototype]] (так оно названо в спецификации),
    которое либо равно null, либо ссылается на другой объект. Этот объект называется «прототип»
    Когда мы хотим прочитать свойство из object, а оно отсутствует, JavaScript автоматически берёт его из прототипа.
    В программировании такой механизм называется «прототипным наследованием».
    Многие интересные возможности языка и техники программирования основываются на нём.
    Свойство [[Prototype]] является внутренним и скрытым, но есть много способов задать его.
    Одним из них является использование __proto__, например так:
    Здесь мы можем сказать, что "animal является прототипом rabbit" или "rabbit прототипно наследует от animal".
    Так что если у animal много полезных свойств и методов, то они автоматически становятся доступными у rabbit.
    Такие свойства называются «унаследованными».
 */

let animal = {
    eats: true,
    walk() {
        console.log('... animal walks ...')
    }
}
let rabbit = {jumps: true};

console.log('1) rabbit.eats: ', rabbit.eats)

console.log('2) (устанавливает animal как прототип для rabbit): rabbit.__proto__ = animal')
rabbit.__proto__ = animal;

console.log('3) rabbit.eats: ', rabbit.eats)

animal.walk()
rabbit.walk()